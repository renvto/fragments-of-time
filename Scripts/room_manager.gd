extends Node

@export var player: Node2D  # Refer√™ncia ao Player
@export var camera: Camera2D  # Refer√™ncia √† c√¢mera

var sala_atual: Node2D = null  # Sala onde o Player est√°
var salas: Dictionary = {}  # Armazena todas as salas

func _ready():
	var world = get_parent().get_node("World")  # Pega o n√≥ "World"
	
	if world == null:
		print("‚ö†Ô∏è ERRO: N√≥ 'World' n√£o encontrado!")
		return
	
	# Guarda todas as salas dentro de "World"
	for child in world.get_children():
		if child.name.begins_with("Sala_"):
			salas[child.name] = child
			child.visible = false  # Esconde todas as salas no in√≠cio
			if child != salas.get("Sala_1"):  # N√£o desativa colis√µes para a sala inicial
				desabilitar_colisoes(child)  # Desabilita as colis√µes de todas as outras salas

	# Define a sala inicial e corrige a refer√™ncia de sala_atual
	definir_sala_inicial()

func definir_sala_inicial():
	if salas.size() == 0:
		print("‚ö†Ô∏è Nenhuma sala encontrada dentro de 'World'!")
		return  # Sai da fun√ß√£o se n√£o houver salas

	# Ordena os nomes das salas para pegar a primeira
	var nomes_salas = salas.keys()
	nomes_salas.sort()  # Garante que Sala_1 seja a primeira

	var primeira_sala = nomes_salas[0]
	print("‚úÖ Sala inicial:", primeira_sala)
	
	# Garante que sala_atual seja v√°lida
	sala_atual = salas[primeira_sala]

	# Ativa apenas a sala inicial
	mudar_sala(primeira_sala)

func mudar_sala(nova_sala: String):
	print("üîÑ Mudando para:", nova_sala)

	if sala_atual:
		sala_atual.visible = false  # Esconde a sala anterior
		ativar_colisoes(sala_atual)  # Ativa as colis√µes da sala anterior
		print("üëÅÔ∏è Escondendo sala:", sala_atual.name)

	sala_atual = salas.get(nova_sala, null)

	if sala_atual:
		sala_atual.visible = true  # Mostra a nova sala
		camera.position = sala_atual.position  # Move a c√¢mera para a nova sala
		desabilitar_colisoes(sala_atual)  # Desabilita as colis√µes da nova sala
		print("‚úÖ Nova sala ativa:", sala_atual.name)
	else:
		print("‚ö†Ô∏è ERRO: Sala inv√°lida!", nova_sala)

# Fun√ß√£o para desabilitar as colis√µes das camadas TileMapLayer
func desabilitar_colisoes(sala: Node2D):
	for tilemap in sala.get_children():
		if tilemap is TileMap:
			# Itera por todas as camadas TileMapLayer dentro do TileMap
			for layer in tilemap.get_children():
				if layer is TileMapLayer:  # Verifica se o n√≥ √© do tipo TileMapLayer
					layer.collision_enabled = false  # Desabilita a colis√£o da camada

# Fun√ß√£o para ativar as colis√µes das camadas TileMapLayer
func ativar_colisoes(sala: Node2D):
	for tilemap in sala.get_children():
		if tilemap is TileMap:
			# Itera por todas as camadas TileMapLayer dentro do TileMap
			for layer in tilemap.get_children():
				if layer is TileMapLayer:  # Verifica se o n√≥ √© do tipo TileMapLayer
					layer.collision_enabled = true  # Ativa a colis√£o da camada
